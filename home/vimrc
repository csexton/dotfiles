"
"
"
"
"
"
"             _____
"         ___/O   O\____
"        / O        O   \
"        \______________/
"   -===|____\///\\\/_____
"       \----------------/
"        \______________/  \/
"         /\__________/    //
"  >=o\  // //\\   || \\  //
"     \\o/ //  \o  ||  \o//
"         //    || ||
"     /o==o     |o \o==o
"    //         //     \\
"    /\        //       /\          csexton's vimrc
"              /\            - frimmin on the frim fram -
"
"
" Bundles {{{
"
"=plugin wellle/targets.vim
"=plugin tckmn/vim-minisnip
"=plugin fatih/vim-go
"=plugin rbong/vim-flog
"=plugin liuchengxu/graphviz.vim
"=plugin posva/vim-vue
"=plugin ConradIrwin/vim-bracketed-paste
"=plugin Keithbsmiley/swift.vim
"=plugin bsdelf/bufferhint
"=plugin csexton/spacemanspiff.vim
"=plugin csexton/trailertrash.vim
"=plugin ekalinin/Dockerfile.vim
"=plugin ervandew/ag
"=plugin ervandew/supertab
"=plugin janko-m/vim-test
"=plugin junegunn/fzf.vim
"=plugin junegunn/vim-easy-align
"=plugin junegunn/vim-peekaboo
"=plugin justinmk/vim-sneak
"=plugin kchmck/vim-coffee-script
"=plugin kshenoy/vim-signature
"=plugin mattn/gist-vim
"=plugin mattn/webapi-vim
"=plugin mhinz/vim-grepper
"=plugin mustache/vim-mustache-handlebars
"=plugin pangloss/vim-javascript
"=plugin plasticboy/vim-markdown
"=plugin ramele/agrep
"=plugin rhysd/vim-crystal
"=plugin sjl/gundo.vim
"=plugin skywind3000/asyncrun.vim
"=plugin slim-template/vim-slim
"=plugin tpope/vim-abolish
"=plugin tpope/vim-bundler
"=plugin tpope/vim-db
"=plugin tpope/vim-dotenv
"=plugin tpope/vim-endwise
"=plugin tpope/vim-eunuch
"=plugin tpope/vim-fugitive
"=plugin tpope/vim-haml # for scss
"=plugin tpope/vim-pathogen
"=plugin tpope/vim-rails
"=plugin tpope/vim-rake
"=plugin tpope/vim-repeat
"=plugin tpope/vim-rhubarb
"=plugin tpope/vim-sensible
"=plugin tpope/vim-surround
"=plugin tpope/vim-unimpaired
"=plugin vim-ruby/vim-ruby
"=plugin w0rp/ale
"
" }}}
"
"
" Settings {{{
syntax on
filetype plugin indent on

let mapleader = ","
set t_Co=256
"colorscheme base16-tomorrow
"silent! colorscheme Tomorrow-Night
silent! colorscheme spacemanspiff

set fillchars=vert:\ ,fold:-
set nofoldenable
set number
set nowrap

" Indent settings for things not set by the file type
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab

set guifont=Anonymous\ Pro:h16,Monaco:h14
"set guifont=Menlo\ for\ Powerline:h14
"set guifont=Menlo:h14

"au BufEnter * cal ctrlp#SetWorkingPath(2)

if has("gui_macvim")
  nmap <SwipeLeft> :bN<CR>
  nmap <SwipeRight> :bn<CR>
endif

cnoremap %% <C-R>=expand('%:h').'/'<cr>

"set clipboard=unnamed
" Copy to the system clipboard when in visual mode
vnoremap <M-y> "+y

" Remap semicolon to be colon
"nmap ; :

" from settings.vim

set cmdheight=1             " Command like height is forced to one line
set dictionary+=/usr/share/dict/words
set gdefault                " When on, the ":substitute" flag 'g' is default on.
set guioptions=egmtc        " Get rid of the scrollbar, toolbar, and popups
set hidden                  " Allow dirty unsaved buffers
set history=1000            " Remember more history
set hlsearch                " Highlight searches
set ignorecase              " Ignore case in searches.
set laststatus=2            " Always show status line
set list                    " show trailing whiteshace and tabs
set listchars=tab:»\ ,trail:\ ,extends:→,precedes:←,nbsp:‗ " Show whitespace glyphs
set modelines=5             " Debian likes to disable this
set mousemodel=popup        " Right mouse button pops up a menu
"set relativenumber
set showcmd                 " Show details in visual mode in command line
set spelllang=en_us         " Make vim speak 'merican
set spellsuggest=best    " Show just 10 possible matches instead of lots of garbage
set suffixes+=.dvi          " Lower priority in wildcards
"set tags+=../tags,../../tags,../../../tags,../../../../tags
set timeoutlen=1200         " A little bit more time for macros
set virtualedit=block       " Let the cursor go where there is nothing
set visualbell              " No more ding sounds
set noerrorbells
set t_vb=
set winwidth=80             " Keep vsplits at least 80 cols

" Wildmenu completion
set wildmenu
set wildmode=list:longest
set wildmode=longest:full,full
set wildignore+=*~
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OS X silliness
set wildignore+=*.luac                           " Lua byte code
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=./vendor/bundle/ruby/*

" Split Settings
"set splitbelow
"set splitright

" Backups
set noswapfile                    " It's 2012, Vim.
set backupskip=/tmp/*,/private/tmp/*" " Make Vim able to edit crontab files again.
set backupskip+=*.tmp,crontab.*

" Persistant Undo
if has('persistent_undo')
  "set undodir^=~/.vim/undo
  "set undodir^=/Users/csexton/.vim/undo
  set undodir=~/.vim/undo
  set undofile
  set undolevels=1000               "maximum number of changes that can be undone
  set undoreload=10000              "maximum number lines to save for undo on a buffer reload
endif

if has("gui_running")
  "set showbreak=⤥
  set background=dark
endif

" Set the grep program
if &grepprg ==# 'grep -n $* /dev/null'
  set grepprg=grep\ -rnH\ --exclude='.*.swp'\ --exclude='*~'\ --exclude='*.log'\ --exclude=tags\ $*\ /dev/null
endif

" Load matchit
runtime! plugin/matchit.vim
runtime! macros/matchit.vim

"if $TERM == '^\%(screen\|xterm-color\)$' && t_Co == 8
"  set t_Co=16
"endif

command! -bar -nargs=0 SudoW   :setl nomod|silent exe 'write !sudo tee % >/dev/null'|let &mod = v:shell_error
command! -bar -nargs=* -bang W :write<bang> <args>

iabbrev lorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
iabbrev o_o ಠ_ಠ

augroup settings
  autocmd!

  " Restore cursor position
  autocmd BufReadPost *.rb if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" | endif

  autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
        \ if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

  "autocmd BufNewFile,BufRead *.scss             set ft=scss.css
  autocmd BufNewFile,BufRead *.coffee           setl foldmethod=indent nofoldenable
  autocmd BufNewFile,BufRead *.feature,*.story  set  ft=cucumber
  autocmd BufNewFile,BufRead *.go               setl noet ts=2 sw=2 sts=2
  autocmd BufNewFile,BufRead *.haml,*.jst       set  ft=haml
  autocmd BufNewFile,BufRead *.md,*.markdown    set  ft=markdown
  autocmd BufNewFile,BufRead *.slim             set  ft=slim
  autocmd BufRead * if ! did_filetype() && getline(1)." ".getline(2).
        \ " ".getline(3) =~? '<\%(!DOCTYPE \)\=html\>' | setf html | endif

  autocmd FileType javascript,coffee            setlocal et sw=2 sts=2 isk+=$
  autocmd FileType html,xhtml,css,scss,scss.css setlocal et sw=2 sts=2 isk+=-
  autocmd FileType eruby,yaml,ruby              setlocal et sw=2 sts=2
  autocmd FileType cucumber                     setlocal et sw=2 sts=2
  autocmd FileType gitcommit                    setlocal spell
  autocmd FileType gitconfig                    setlocal noet sw=8 sts=8 tabstop=8
  autocmd FileType ruby                         setlocal comments=:#\  tw=79
  autocmd FileType go                           setlocal nolist
  autocmd FileType vim                          setlocal et sw=2 sts=2 keywordprg=:help
  autocmd FileType python                       setlocal sts=4 ts=4 sw=4 textwidth=79
  autocmd FileType c                            setlocal et sw=2 sts=2
  autocmd FileType objc,objcpp                  setlocal et sw=4 sts=4
  autocmd FileType sh,zsh                       setlocal et sw=2 sts=2 ff=unix
  autocmd FileType make                         setlocal noet ts=8 sw=8 sts=0

  " Fastlane
  autocmd BufNewFile,BufRead Appfile set ft=ruby
  autocmd BufNewFile,BufRead Deliverfile set ft=ruby
  autocmd BufNewFile,BufRead Fastfile set ft=ruby
  autocmd BufNewFile,BufRead Gymfile set ft=ruby
  autocmd BufNewFile,BufRead Matchfile set ft=ruby
  autocmd BufNewFile,BufRead Snapfile set ft=ruby
  autocmd BufNewFile,BufRead Scanfile set ft=ruby

  autocmd FileType markdown                     setlocal linebreak formatoptions=1 breakat=\ @-+;:,./?^I wrap nolist textwidth=0 wrapmargin=0 fo-=t
  let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']


  autocmd Syntax   css  syn sync minlines=50


  " Omni completion.
  autocmd FileType css             setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown   setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript      setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python          setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml             setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType ruby            set omnifunc=rubycomplete#Complete
  autocmd FileType ruby            let g:rubycomplete_buffer_loading=1
  autocmd FileType ruby            let g:rubycomplete_classes_in_global=1
  autocmd FileType ruby            let g:ruby_indent_access_modifier_style='outdent'

  autocmd FileType ruby imap <C-l> <Space>=><Space>

  autocmd BufEnter *.rb syn match error contained "\<binding.pry\>"
  autocmd BufEnter *.rb syn match error contained "\<debugger\>"
  autocmd BufEnter *.rb syn match error contained "\<byebug\>"
  autocmd BufEnter *.coffee syn match error contained "\<debugger\>"

  autocmd BufNewFile *.rb 0r ~/.vim/skeleton/ruby.rb | 3

augroup END




" vim:set ft=vim et tw=78 sw=2 encoding=utf-8

" }}}
" Mappings {{{


nnoremap          j gj
nnoremap          k gk
inoremap          <C-C> <Esc>`^
cnoremap          <C-O> <Up>
inoremap          ø <C-O>o
inoremap          <M-o> <C-O>o
inoremap          <C-X><C-@> <C-A>

" Sacrilege: emacs like bindings in command and insert
inoremap          <C-A> <C-O>^
cnoremap          <C-A> <Home>
cnoremap          <C-X><C-A> <C-A>
cnoremap          <C-P> <Up>
cnoremap          <C-N> <Down>
inoremap          <C-k> <C-O>D
cnoremap          <C-k> <C-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>

" ESC, C-c, and friends are hard on my RSI
inoremap jk <Esc>

" Buffer Navigation
" Move to the previous buffer with "gp"
nnoremap gp :bp<CR>
" Move to the next buffer with "gn"
nnoremap gn :bn<CR>
" List all possible buffers with "gl"
nnoremap gl :ls<CR>
" List all possible buffers with "gb" and accept a new buffer argument [1]
nnoremap gb :ls<CR>:b

" Get dot command repeatability in visual mode
xnoremap . :normal.<CR>

" Clear incremental search highlight
nnoremap <silent> <C-L> :nohlsearch<CR><C-l>
nnoremap <leader>/ :nohlsearch<CR>

" Toggle spell checking
nnoremap <leader>s :set spell!<CR>

" Block Ex mode, because I really don't want to type "visual" again
nnoremap Q <nop>

" Inserts the path of the currently edited file into a command
"cmap <C-F> <C-R>=expand("%:p:h") . "/" <CR>

" If at end of a line of spaces, delete back to the previous line. Otherwise, <Left>
inoremap <silent> <C-B> <C-R>=getline('.')=~'^\s*$'&&col('.')>strlen(getline('.'))?"0\<Lt>C-D>\<Lt>Esc>kJs":"\<Lt>Left>"<CR>
cnoremap          <C-B> <Left>

" If at end of line, decrease indent, else <Del>
inoremap <silent> <C-D> <C-R>=col('.')>strlen(getline('.'))?"\<Lt>C-D>":"\<Lt>Del>"<CR>
cnoremap          <C-D> <Del>

" If at end of line, fix indent, else <Right>
inoremap <silent> <C-F> <C-R>=col('.')>strlen(getline('.'))?"\<Lt>C-F>":"\<Lt>Right>"<CR>
cnoremap          <C-F> <Right>

" Map Control-E to go to the end of the line in insert mode. However, when
" completion is active you can use CTRL-E to stop it and go back to the
" originally typed text.
inoremap          <C-E> <C-R>=InsCtrlE()<CR>
function! InsCtrlE()
    try
        norm! i
        return "\<c-o>A"
    catch
        return "\<c-e>"
    endtry
endfunction

" Toggle line wrapping
map <Leader>w  :set nowrap!<CR>

" Toggle line numbers
map <Leader>l  :set nonumber!<CR>

" Browse the directory of the current file
"map <Leader>b  :edit %:h<CR>

" Jump to the last posistion in the buffer
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" Jump back to the top on git commit messages
autocmd BufReadPost COMMIT_EDITMSG exe "normal! gg"
" }}}
" Bundle settings {{{

" smartusline
"set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
"let g:smartusline_hi_insert = 'guibg=#6D1F21 guifg=white ctermbg=red ctermfg=black'
"let g:smartusline_hi_normal = 'guibg=#B5BD68 guifg=black ctermbg=green ctermfg=black'

" Netrw
let g:netrw_banner=0
let g:netrw_winsize=20
let g:netrw_liststyle=0

" For sneaky streak
let g:sneak#streak = 1

let g:is_bash = 1                " Highlight all .sh files as if they were bash
let g:ruby_minlines = 500
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1

" BufExplorer
let g:bufExplorerShowRelativePath=1

" Gist
if has('mac')
  let g:gist_clip_command = 'pbcopy'
endif

" Markdown
let g:vim_markdown_new_list_item_indent = 0

" Surround
let g:surround_{char2nr('s')} = " \r"
let g:surround_{char2nr(':')} = ":\r"
let g:surround_indent = 1

" Vim Clojure
let vimclojure#HighlightBuiltins = 1 " Highlight Clojure builtins
let vimclojure#ParenRainbow = 1      " Rainbow parentheses

" SuperTab
"let g:SuperTabContextDefaultCompletionType = "<c-n>"
"let g:SuperTabDefaultCompletionType = "context"
"autocmd FileType css,scss let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
"autocmd FileType css,scss call SuperTabSetDefaultCompletionType("<c-x><c-o>")
"autocmd FileType css,scss call SuperTabSetDefaultCompletionType("context")

"let g:SuperTabMappingForward  = '<s-tab>'
"let g:SuperTabMappingBackward = '<tab>'

" MiniSnip
let g:minisnip_trigger = "<c-s>"

" ALE

let g:ale_sign_warning = '•'
let g:ale_sign_warning = '•'
"let g:ale_ruby_rubocop_executable = './bin/rubocop'
highlight link ALEErrorSign WarningMsg
highlight link ALEWarningSign Comment
nnoremap <silent> <leader>a :ALEToggle<CR>

" This seems to be broken, so I just call their disable function
let g:ale_set_balloons = 0
"call ale#balloon#Disable()

let g:ale_sign_column_always = 1
autocmd BufRead,BufNewFile * setlocal signcolumn=yes
autocmd FileType unite,nerdtree setlocal signcolumn=no

function! DisableAleStrategy(cmd)
  ALEDisable
  execute '!'.a:cmd
  ALEEnable
endfunction

let g:ale_fixers = {'ruby': 'rubocop'}
let g:ale_fix_on_save = 0

let g:test#custom_strategies = {'disable_ale': function('DisableAleStrategy')}
let g:test#strategy = 'disable_ale'

" vim-go
let g:go_list_height = 10
let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "goimports"

" Showmarks
hi ShowMarksHLl ctermfg=11 ctermbg=NONE gui=bold guifg=blue guibg=lightblue
hi ShowMarksHLu ctermfg=11 ctermbg=NONE gui=bold guifg=blue guibg=lightblue
hi ShowMarksHLo ctermfg=11 ctermbg=NONE gui=bold guifg=blue guibg=lightblue
hi ShowMarksHLm ctermfg=11 ctermbg=NONE gui=bold guifg=blue guibg=lightblue
hi SignColumn   ctermbg=NONE guibg=NONE
hi SpellCap     ctermfg=NONE ctermbg=NONE cterm=underline

" Fix arrow keys in tmux
"map <Esc>[B <Down>

" Trailer Trash
autocmd BufWritePre * :TrailerTrim

" Gundo
command! Gundo :GundoToggle

" FZF
if isdirectory('/opt/homebrew/opt/fzf/')
  set rtp+=/opt/homebrew/opt/fzf/ " For homebrew
  let g:fzf#vim#default_layout = {'down': '~80%'}

  command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  nnoremap <silent> <Leader><Leader> :Files<CR>
  nnoremap <silent> <leader>t        :<C-u>Files<CR>
  "nnoremap <silent> <Leader>c        :Colors<CR>
  "nnoremap <silent> <Leader>c        :Tags<CR>
  nnoremap <silent> <Leader>e        :Buffers<CR>
  nnoremap <silent> <Leader>g        :Lines<CR>
  nnoremap <silent> <leader>f        :BLines<CR>
  nnoremap <silent> <Leader>h        :History:<CR>
  nnoremap <silent> <Leader>/        :History/<CR>

  inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')
  "inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  "\ 'prefix': '^.*$',
  "\ 'source': 'rg -n ^ --color always',
  "\ 'options': '--ansi --delimiter : --nth 3..',
  "\ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

  function! FzfSpellSink(word)
    exe 'normal! "_ciw'.a:word
  endfunction
  function! FzfSpell()
    let suggestions = spellsuggest(expand("<cword>"))
    return fzf#run({'source': suggestions, 'sink': function("FzfSpellSink"), 'down': 10 })
  endfunction
  nnoremap z= :call FzfSpell()<CR>

endif


" fzf ripgrep
if executable("rg")
    command! -bang -nargs=* Rg
          \ call fzf#vim#grep(
          \   'rg --column --line-number --no-heading --color=always --glob "!.git/*" --ignore-case '.shellescape(<q-args>), 1,
          \   <bang>0 ? fzf#vim#with_preview('up:60%')
          \           : fzf#vim#with_preview('right:50%:hidden', '?'),
          \   <bang>0)

    nnoremap <C-p>a :Rg
endif


" Vim Test
let test#ruby#rspec#options = '--color --format documentation'
command! -nargs=0 RspecCurrentFile TestFile
command! -nargs=0 RspecNearest TestNearest
command! -nargs=0 RspecAll TestAll
command! -nargs=0 RspecLast TestLast
nnoremap <leader>. :TestLast<CR>
nnoremap <leader>n :TestNearest<CR>
nnoremap <Space> :wall\|TestLast<CR>

"endif

" }}}
" Functions and commands {{{
" Remap what spacebar does. Provide a custom command and every time space is
" pressed vim will save all files and run the command.
function! RemapSpace(cmd)
  execute 'nnoremap <Space> :wall\|'. a:cmd . '<CR>'
endfunction
command! -nargs=+ RemapSpace call RemapSpace(<q-args>)

command! -nargs=* Prose set wrap linebreak nolist

" https://schollz.com/software/my-favorite-vimrc/
function! WordProcessorMode()
  set columns=80
  setlocal formatoptions=1
  setlocal noexpandtab
  setlocal spell spelllang=en_us
  setlocal complete+=s
  setlocal formatprg=par
  setlocal wrap
  setlocal linebreak
  setlocal foldcolumn=3
  highlight Normal ctermfg=grey ctermbg=black
  highlight NonText ctermfg=grey guifg=grey
endfu
com! WP call WordProcessorMode()

" Increment a column of number. Select a column of numbers (numbers should be
" the same), then C-a to have them incremented from the first number.
function! Incr()
    let a = line('.') - line("'<")
    let c = virtcol("'<")
    if a > 0
        execute 'normal! '.c.'|'.a."\<C-a>"
    endif
    normal `<
endfu
vnoremap <C-a> :call Incr()<CR>

" Remove curly quotes
function Dequote()
  " Requires `gdefault` to be set.
  exec ":%s/[“”]/\"/"
  exec ":%s/[‘’]/'/"
endfunction
command! -nargs=0 Dequote :call Dequote()

" }}}
" Packages {{{
if exists(":packloadall")
  packloadall
endif


" Grepper
let g:grepper.tools = ['rg', 'git', 'ag', 'ack', 'ack-grep', 'grep']
" }}}

function! s:HighlightCopy()
  if executable("highlight")
    call system('highlight --font "Menlo" -O rtf  '.expand("%:p").' | pbcopy')
    echom "Copied to clipboard"
  else
    echoerr "highlight not installed"
  endif
endfunction
command HighlightCopy :call s:HighlightCopy()

" vim: set foldenable fdm=marker fmr={{{,}}}:

